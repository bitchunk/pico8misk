pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
--utils
function tonorm(s)
if tonum(s) then return tonum(s)
elseif s=='true' then return true
elseif s=='false' then return false
elseif s=='nil' then return nil
end
return s
end

function tohex(p,n)
p=sub(tostr(tonum(p),1),3,6)
while sub(p,1,1)=='0' do
p=sub(p,2)
end
p=join(tbfill(0,(n or 0)-#p),'')..p
return p
end


function ttoh(h,l,b)
return bor(shl(tonum(h),b),tonum(l))
end
function htot(v)
return {lshr(band(v,0xff00),8),band(v,0xff)}
end

function replace(s,f,r)
local a=''
while #s>0 do
local t=sub(s,1,#f)
a=a..(t~=f and sub(s,1,1) or r or '')
s=sub(s,t==f and 1+#f or 2)
end
return a
end

function htbl(ht,ri)
local t,c,k,rt,p={},0
ht=ri or replace(ht,"\n")
while ht~='' do
p,ht=sub(ht,1,1),sub(ht,2)
if p=='{' or p=='=' then
rt,ht=htbl(nil,ht)
if rt then
if p=='=' then
t[k]=rt[1]
elseif k then
t[k]=rt
else
add(t,rt)
end
end
k=nil
elseif p=='}' or p==';' then
add(t,tonorm(k))
k=nil
return t,ht
elseif p==' ' then
add(t,tonorm(k))
k=nil
else
k=(k or '')..p
end
end
add(t,tonorm(k))
return t
end

mkrs,hovk,_mnb=htbl'x y w h ex ey r p'
,htbl'{x y}{x ey}{ex y}{ex ey}'
,htbl'cont hover ud rs rf cs cf os cam'
function rfmt(p)
local x,y,w,h=unpack(ttable(p) or _split(p,' ',true))
return comb(mkrs,{x,y,w,h,x+w-1,y+h-1,w/2,p})
end

function exrect(p)
local o=rfmt(p)
return cat(o,comb(_mnb,{
function(x,y)
if y then
return inrng(x,o.x,o.ex) and inrng(y,o.y,o.ey)
else
return o.cont(x.x,x.y) and o.cont(x.ex,x.ey)
end
end
,function(r,p)
local h
for i,v in pairs(hovk) do
h=h or o.cont(r[v[1]],r[v[2]])
end
return h or p==nil and r.hover(o,true)
end
,function(p,y,w,h)
return cat(
o,rfmt((tonum(p) or not p) and {p or o.x,y or o.y,w or o.w,h or o.h} or p
))
end
,function(col,f)
local c=o.cam
f=(f or rect)(o.x-c.x,o.y-c.y,o.ex-c.x,o.ey-c.y,col)
return o
end
,function(col)
return o.rs(col,rectfill)
end
,function(col,f)
(f or circ)(o.x+o.r-o.cam.x,o.y+o.r-o.cam.y,o.w/2,col)
return o
end
,function(col)
return o.cs(col,circfill)
end
,function(col)
return o.rs(col,oval)
end
,{x=0,y=0}
}))
end

function toc(v,p)
return flr(v/(p or 8))
end

function join(s,d)
local a=''
for i,v in pairs(s) do
a=a..v..d
end
return sub(a,1,-1-#d)
end

_split,split=split,function(str,d,dd)
if dd then
local a,str={},split(str,dd)
while str[1] do
add(a,split(deli(str,1),d))
end
return a
end
return _split(str,d or ' ',false)
end

_bc={}
function htd(b,n)
local d={}
n=n or 2
for i=1,#b,n do
add(d,tonum('0x'..(sub(b,i,i+n-1))))
end
return d
end

function slice(r,f,t)
local v={}
for i=f,t or #r do
add(v,r[i])
end
return v
end

function cat(f,s)
for k,v in pairs(s) do
if tonum(k) then
add(f,v)
else
f[k]=v
end
end
return f
end

function comb(k,p)
local a={}
for i=1,#k do
a[k[i]]=p[i]
end
return a
end

function tbfill(v,n,r)
local t={}
if r and r>0 then
n,r=r,n
end
for i=0,n-1 do
t[i]=r and tbfill(v,r) or v
end
return t
end

function ecxy(p,f)
p=rfmt(p)
for y=p.y,p.ey do
for x=p.x,p.ex do
f(x,y,p)
end
end
end

function outline(t,a)
local i,j,k,l=unpack(split(a))
ecxy('-1 -1 3 3',function(x,y)
?t,x+i,y+j,l
end)
?t,i,j,k
end

function tmap(t,f)
for i,v in pairs(t) do
t[i]=f(v,i) or t[i]
end
return t
end

function mkpal(f,t)
return comb(htd(f,1),htd(t,1))
end
function ecmkpal(v)
return tmap(v,function(v,i)
i,v=unpack(v)
return tmap(v,function(v)
return mkpal(_ENV[i],v)
end)
end)
end
function ecpalt(p)
for i,v in pairs(p) do
if v==0 then
palt(i,true)
end
end
end

function ttable(p)
return type(p)=='table' and p
end

function inrng(c,l,h)
return mid(c,l,h)==c
end
function amid(c,a)
return mid(c,a,-a)
end

function bmch(b,m,l)
b=band(b,m)
return l and b~=0 or b==m
end


-->8
_fillpmask=0
_fillpdat=[[
1 4 4 123456789abcdef 8000ffffc000e000f0000000f8008888fc00ccccfe00eeeeff00ff80ffc0ffe0fff0fff8fffcfffe 0010200202001020020a0030200202003020020a0040200202004020020a005020060200502006020020800702008020070200802002080090200a020090200a020020800b0200c0200b0200c020020800d020020200d02002020060800e020020200e02002020080800f020020200f020020200a080100200202010020020200c080110200202011020020a0120200202012020020a0130200202013020020a0140200202014020020a
1 16 16 234789be fffffff8ff80ff00ff31fffee8000000ffc0c000d113ecc0ffe08000fe003748f777eecce00010007777fff077ff9337f0000133800f77f700018125f7f7a131a7fffff7c0125a5aefff08eff00c00175a5f5ffffc01ac431480ffc8f0108844e024c022fff1a21000088103b333fc007000ff42877e7810ef377fff9100cce30012f800803d2c8080103d706c86ffccc888a41988cc3331edccef90008ea88bc421f10008ff01ffc8cef77ffd00fff3e00e37ffcfff0fff3fffd2efb731fedfff739ecc088cf248fe9387ffec80377ffeec7770ec860137fffcfeccff62800126eebfff088800101100ec99bbbdffee1133ff90ceffc0cf01000080ec8bec441065cdee08f71113e26600377fdf89ff6631e76ffe48777fcccc0310f3c3fdf99f7f88887337ccce0021013f0cff100eff7ffeed33ff8b7ffffdbfbbeeefdcefff79fb7ffff99bff 00109002010030100401005010010a0060100701008010090100a0100b010010a00c0100d0100a0100e0100f010100100a010110100107012010010301301014010080100a01015010010900d0101601001010130100a0100801015010010800a0101601001030080101301017010010700d0100401008010160100f010040100801018010010700801009010130100802019010130101a01001060090200e0100802013010190100f0101b01017010010600a010160100f0100101013010080100a0101c010010900e010080200e0101d0101e0101f010010a013010080100d0102001021010010e006010220100109002010010300d0102301024010010902501026010270100a01028010290102a010018d02b010010f02c0102d01001dc02e0102f010010e03001031010010c03201002010330100103022010010903401035010360101901001020370100109038010390103a0103b0103c0103d0103e010010b03f0104001041010016000d010420104301044010010c0450104601047010011204801001080490101901001040060104a010010804b0104c010010404d010010904e0104f010040100103050010010b05101052010010f05301054010011a05501056010010d00601057010580100601033010010a0090100f010080301d010010a05901008030280105a010010b05b0105c0105d010018f0060105e0105f010010c0600100a0106101062010010d063010140106401001710020101601058010010b065010660103e0106701068010010a0690106a010160106b0106c0106d01038010010806e01008030140106f0107001071010010807201073010740103501008010750106801076010010907701035010080307801079010010807a0107b0107c010350107d0107e0107f01017010010500601042010800108101001020820108301084010010602e01085010860108701001040880103e01001050690100801089010010108a010010208b0108c010010708d010080108e0108f0100102090010910100108092010080201d01093010010203e0100108094010080109501096010010d097010980109901001a109a0109b0100110048010010f09c01001dd09d010010f09e010010d09f0108c010a0010a1010a2010010e0a3010010f0a40100148
1 16 16 6 fffffffee8003000f700e0000000f773ecef1000f777ff80f03f77bd88887733eec8177feeef730c80001100ffe9911dfff3eeee377f7b88eb7f7ceec000cd370fffff90ffe00137ec88ff70fec07fff00133777000107ff019b0cef73331110b37737730011739c9880f701ffc0c977cfff8eff008c17ffceef 001050020100301004010050100601007040080100106009010070800a0100b010010200c0100d0100e010010100f0100708010010010101101012010010101301014010150100708016010170101801001020190101a010070a01b010010101c0101d0101e0101f010070a00101020010210102201023010070a024010250102601027010070c028010070e02901001010070e02a01001010070a02b0102c0102d0102e0102f01001010070a0300100201031010010103201001010070a0330102101034010020103501036010070a01601037010380102801039010280103a0103b01007080290103c010010503d010070801b0100105
2 8 8 2346789be fffffffee000fc00f8000000ffe08000ffc0fe00ff00ff80800fc00077f700010125f7f72131a7fffe2cf111867374008248ffe1fff0c221ffece443fe10c423e12ce6ad8010ffcefffcff01fffb808cc10ff000b3377000ff4287eef200c7339100cce3012ef7f1f88888cc23331cc3d6adff300077f1ffc8cef7fffd00fff3fff1e9fff7bdf773088cf2488fff0088001100081100abbffc80def3c88c011000807623136dcbbc00ff111300337fe3fff709ff7fff66ffe7efeac877fff3d3dfb9733719fffecef77fffedbfffffb9eeff37ffdceff73cfbff9fffa131fff88804e230308cff17fecc3d44e02c88c7c00fff88c048b3779000fff6dfecf010f333b100cc63124877f1fc88888c0667bd4c9defff21c09f98ceff73efe3733088ce000c24498bff00028eef1000ff4c080400216623117c08ad000e0137e19f6fffffef4cffecc973d3be32ffccef7f319fff7ffb99efff33ffccfff70fff33 001040020100102003010010300401001070050100601001010070100102008010090100a010060200b01003010090100801006020080100c0100a0100d0100b0100a01001020060100e0100f0100101008010060301001011010120100102003010060100a0101301014010011c015010160100107017010180100107019010011701a0101b010010501c010010501d010080101e010080101b0101f0100b0100101020010210100101022010230102401001010250102601001030270100102028010290102a010010202b010010202c0102d0102e0102f010300100104031010320103301034010014200201001020350100b01001060360103701001070380100b01001070390103a010010703b0103c010010a03d0103e01001050020103f010400100201041010011d002010420104301001050080104401001060450100601046010011504701048010490104a010060104b010010304c01006040010204d0104e0104f0104a010500105101003010520105301001020540105501056010570105801001030590105a0105b0105c0105d010010205e0105f0100102060010010206101012010010301001062010011902701001070630100108064010650100134066010010106701001040400106801001050690106a0106b0106c0106d0100106068010010706e01001080250100102003010010300501003010010600e0102a010010100901001020080100901006010030102a0101b010030100a010080100b010080100e01007010060100d0102a0101b0102a0101b0100c0100e0100f010010100301006030100101101012010010200e01006010030106f01014010011507001001070710105901001060720107301074010012b075010080107601001050200107701001050070100b0100106078010790107a010010107b0107c010010207d0107e0107f0108001081010010408201083010840108501001450860101b010010608701088010010708901070010010708a0108b010010708c0103c010010a08d01001060020103f0108e0107001041010011e059010010508f01048010900100106091010920109301001150940104a01095010060204b01001030960109701006030010204d0109801099010060109a010060100e0109b0109c010010209d0109e010560109f0105801001030a0010420105b010a1010a2010a301001010a40105f01001020a501001020a601001040100106201001190a70105901001060a80105b01001080a90100134025010aa0100105040010ab01001050ac010ad010ae010af01001070b001001070670100104
2 10 4 1567d fffffffeff80fc00f0000000ffc0e0008000f801c07e03c0ff0000880f000ff0ffe1fcb71fc0f800648c07ffff0f87770fff1e1cf0f0fff0f00ff17ffff87f80f777ffefc7ff3fffcffff8cefeeef001ff1cfeffeff07ff0cccceeefc000c8ce8eff00cf000feeff3777efff7733ccceff77000873300cff308f 0011500201003010040100501006050010c0020100107007010080100601001070090100a0100b0100c0100d01005030010200e0100101008010060200f010100100104002010110100d01005020060200502012010130101401009010060400502015010160100109006010050100d01017020010b00201010020010701801019020010c01a0101b010010901c0100d010170101d0101e010010401f010200100d01005020210100102022010230102401025010190100102026010050202701028010290101c0102a010010102b010100102c0101c0100106006040011e02d01001050050402e0100105006040010600901006030010702f01006020010102f010060200d0100106009010060300106030010060301c0100106031010320103301006010050100d0101c02001280340103501001010360100e01006010010503701001020380100601039010010402401001020340103a0103b01001080360103c0103d0101d02
1 32 4 4567f fffffffcfff0ffc0ff00ffccff01ffeeff07ff88ff89ffcdff03ff06fff8fe8881ff13b033005400e222fffe3000e000ec02c89300cff311813bfff3ffe8fe80f310fff1c881d9aaffc8ffe08000f01f00ff80ff03ffccffc0fff88fff30fffd9955ff80f000f100fe00f222f001f004f111f800f900ff02ff08ffb0c008c005008d33b78bbb08bb03bc0db7cbde0dd20f870e698778c33c0ff0cb830f3c0ee10f78867900dd00dc008e800c3100e7b000d3ff0fff3dffedff1eff87ff7bff69ff2dffcbff96fff4ffeae1ff0ff3d3bbef73b3b8dd03dd19baaa7fcc9dcddd15ddddb766de667fe6777f77ff7733dcca7fff337fba93f3cffff5e77bffb7fbbbf8bbf3bcfdb7fbdefdd2fe69f778f33cfb83ff3cfee1ff78f779ffddffdcaaa5feffee1cefc00e1f70ffe0ff20ff30ff078ff7b0fffbff73ffb8fff7fd03fd19ffbbfaaafdcdff77fd15fdddf766fe66ffe6ff0ef77ff7fff733ffcaff7ff77b3fffb3bf3bffbbffbfffcfffdfffefff9dfffdfffeef77eff35efedf5dddffc3fc3ff0ffedbb7bdd777beeedbbbbfe1fc3ff0fff3cfff78f 0010300201003010040100501001010060100701008010090100a010090100b010010100c010060100d0100601009010010100e0100902005020030100f01001040100101101001010120100101013010010201401001020150100101016010010100f0100101017010180100105019010010201a0101b0101c010010201d010010400f0101e0101f010030102001021010020100f010030300101002010030201602003010220100105023010010202401025010260102701028010290202a0102b010010d02c010290102d0202e0102f01030010310100124002010030103201005010330103401035010330203601033010370103301038010390103a010330303a0203b0103c0103d0103e010010603f01040010410102d01042010430104401045010460104701048010490104a0104b0104c0104d0104e0104f0104b0105002051010520105301054010550105601057010011e05801059010010601601022010020105a0105b0105c0105d0105e0105f0105e010600105a010610105b010620105b0105e0105a010630105e0201e0100301002010640100104065010660106701068010690106a010010106b0106c010010206d0106e0106f0100101070010710107201073010740100101075010760107701078010790107a0107b0107c0107d010010207e010010105c01030010010107f0108001081010820108301084010850105e01086010870108801003010890108a010870108b0208c0108d0108e0108f0101601001020900100103091010920109301094010010102d01095010010f0960109701098010990109a0101e010012509b0209c0109d0109e0109f010a00108e010a1010a201006010a3010a4010a5010a6010a7010a8010a9010aa010ab010ac010ad010ae01001010af0109e01001050b0010b1010b2010b3010b401079010b5020b6010b1010b701001010b801079010b1010b6010b10100101079010b80200101079010b9010ba010bb010bc010bd0107d01001030b7010011a0be010bf010010300f010c00105a010c1010c21407c0105a0108a0102201001030c301079010011a0b8010c401001020c5010011c0c601001020c7010010100201004010c8010c2030c9010ca0d0cb010c2030cc0101e01001010710100101
]]
--_fillpprm={}
_fillcols={}
_fppt={0x1111.1111,0x3333.3333,0x7777.7777}
local dp={}
foreach(split(_fillpdat,"\n"),function(d)
add(dp,#d>0 and split(d," ") or nil)
end)
_fillpdat={}
for pp,pr in pairs(dp) do
local p,w,h,c,lb,d=unpack(pr)
local cc={}
c=tostr(c)
for i=1,#c do
add(cc,tonum('0x'..sub(c,i,i)))
end
pr[4]=cc

local o,oo,ooo={},{},{}
while d and #d>0 do
local f,m
=(tonum('0x'..sub(d,1,3))-1)*4
,tonum('0x'..sub(d,4,5))
d=sub(d,6)
while m>0 do
m-=1
local s=sub(lb,f+1,f+4)
add(o,tonum('0x'..s..'.'..s))
if tonum(w)==#o then
add(oo,o)
o={}
if tonum(h)==#oo then
add(ooo,oo)
oo={}
if #cc==#ooo then
add(_fillpdat,ooo)
ooo={}
add(_fillcols,cc)
--add(_fillpprm,pr)
end
end
end
end
end
end
function fillpdraw(i,x,y)
_fillpmask=bor(_fillpmask,0x.8)
--local p,w,h,c,lb,d=unpack(_fillpprm[i])
local b,c=x&3,_fillcols[i]
camera(-x,-y)
for cc,oo in pairs(_fillpdat[i]) do
for yy,o in pairs(oo) do
yy-=1
for xx,d in pairs(o) do
xx-=1
if d~=0xffff.ffff then
--fillp(bor(rotr(d,y<<2),_fillpmask))
--local l=bor(d,_fppt[b])>><b
--local r=bor(d,bnot(_fppt[b]))<<>4-b
--fillp(rotr(l&r,y<<2)|_fillpmask)
--fillp(bor(rotr(l,r),y<<2),_fillpmask))
--fillp(bor(band(l,0xffff),_fillpmask))
--fillp(bor(band(0xffff,r),_fillpmask))
fillp(rotr((bor(d,_fppt[b])>><b)&(bor(d,bnot(_fppt[b]))<<>4-b),y<<2)|_fillpmask)
rectfill(xx*4,yy*4,xx*4+3,yy*4+3,c[cc])
end
end
end
end
camera(0,0)
fillp()
end
-->8

-->8
x=32
y=32
p=1
function _update60()
cls()
x+=(btn(0) and -1 or btn(1) and 1 or 0)
y+=(btn(2) and -1 or btn(3) and 1 or 0)
--x+=(btnp(0) and -1 or btnp(1) and 1 or 0)
--y+=(btnp(2) and -1 or btnp(3) and 1 or 0)
p=not btnp(4) and p or p==1 and 2 or 1 
fillpdraw(p,x,y)
--rectfill(32,31,47,31)
spr(1,32,31)spr(1,40,31)
?stat(1),0,120
?x,32,120
?y,48,120
end
__gfx__
00000000012301230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
