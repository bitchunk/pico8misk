pico-8 cartridge // http://www.pico-8.com
version 27
__lua__
--utils

function tonorm(s)
if tonum(s) then return tonum(s)
elseif s=='true' then return true
elseif s=='false' then return false
elseif s=='nil' then return nil
end
return s
end

function todeg(p)
return tonum('0x'..p)
end
function tohex(p,n)
p=sub(tostr(tonum(p),16),3,6)
while sub(p,1,1)=='0' do
p=sub(p,2)
end
p=join(tablefill(0,(n or 0)-#p),'')..p
return p
end


function ttoh(h,l,b)
return bor(shl(tonum(h),b),tonum(l))
end
function htot(v)
return {lshr(band(v,0xff00),8),band(v,0xff)}
end

function replace(s,f,r)
local a=''
while #s>0 do
local t=sub(s,1,#f)
a=a..(t~=f and sub(s,1,1) or r or '')
s=sub(s,t==f and 1+#f or 2)
end
return a
end

function htbl(ht,ri)
local t,c,k,rt,p={},0

ri,ht=ri or 0,ri and ht or replace(ht,"\n")
while ht~='' do
p,ht=sub(ht,1,1),sub(ht,2)
if p=='{' or p=='=' then
rt,ht=htbl(ht,ri+1)
if rt then
if p=='=' then
t[k]=rt[1]
else
if k then
t[k]=rt
else
add(t,rt)
end
end
end
k=nil
elseif p=='}' or p==';' or p==')' then
add(t,tonorm(k))
k=nil
return t,ht
elseif p==' ' then
add(t,tonorm(k))
k=nil
else
k=(k or '')..p
end
end
add(t,tonorm(k))
return t
end


function exrect(p)
return _exrect.new(p)
end
_exrect={}
mkrs,hovk=htbl'x y w h ex ey r p'
,htbl'{x y}{x ey}{ex y}{ex ey}'
function rfmt(p)
local x,y,w,h=unpack(tmap(ttable(p) or split(p),function(v)
return tonum(v)
end))
return comb(mkrs,{x,y,w,h,x+w-1,y+h-1,w/2,p})
end
_exrect.new=function(p)
local o=rfmt(p)
return cat(o,{
cont=function(x,y)
if y then
return inrng(x,o.x,o.ex) and inrng(y,o.y,o.ey)
else
return o.cont(x.x,x.y) and o.cont(x.ex,x.ey)
end
end
,hover=function(r,p)
local h
for i,v in pairs(hovk) do
h=h or o.cont(r[v[1]],r[v[2]])
end
return h or p==nil and r.hover(o,true)
end
,ud=function(p,y,w,h)
return cat(
o,rfmt((tonum(p) or not p) and {p or o.x,y or o.y,w or o.w,h or o.h} or p
))
--return cat(o,rfmt({p or o.x,y or o.y,w or o.w,h or o.h}))
end
,rs=function(col,f)
local c=o.cam
f=(f or rect)(o.x-c.x,o.y-c.y,o.ex-c.x,o.ey-c.y,col)
return o
end
,rf=function(col)
return o.rs(col,rectfill)
end
,cs=function(col,f)
(f or circ)(o.x+o.r-o.cam.x,o.y+o.r-o.cam.y,o.w/2,col)
return o
end
,cf=function(col)
return o.cs(col,circfill)
end
,cam=htbl'x=0;y=0;'
})
end

function toc(v,p)
return flr(v/(p or 8))
end

function join(s,d)
local a=''
for i,v in pairs(s) do
a=a..v..d
end
return sub(a,1,-1-#d)
end


function split(str,d,dd)
local a,c,s,tk={},0,''
if dd then str=split(str,dd) end
while #str>0 do
if dd then
add(a,split(del(str,str[1]),d))
else
s,str=sub(str,1,1),sub(str,2)
if s==(d or ' ') then
add(a,tk)
tk=nil
else
tk=(tk or '')..s
end
end
end
add(a,tk)
return a
end

function btd(b,n)
local d={}
n=n or 2
for i=1,#b,n do
add(d,todeg(sub(b,i,i+n-1)))
end
return d
end

function slice(r,f,t)
local v={}
for i=f,t or #r do
add(v,r[i])
end
return v
end

function cat(f,s)
for k,v in pairs(s) do
if tonum(k) then
add(f,v)
else
f[k]=v
end
end
return f
end

function comb(k,v)
local a={}
for i=1,#k do
 a[k[i]]=v[i]
end
return a
end

function tablefill(v,n,r)
local t={}
if r and r>0 then
n,r=r,n
end

local p=ttable(v) and #v==0
for i=0,n-1 do
t[i]=p and {} or r and tablefill(v,r) or v
end
return t
end

function ecxy(p,f)
p=rfmt(ttable(p) or split(p))
for y=p.y,p.ey do
for x=p.x,p.ex do
f(x,y,p)
end
end
end

function outline(t,a)
local i,j,k,l=unpack(split(a))
ecxy('-1 -1 3 3',function(x,y)
?t,x+i,y+j,l
end)
?t,i,j,k
end

function tmap(t,f)
for i,v in pairs(t) do
t[i]=f(v,i) or t[i]
end
return t
end

function eachpal(f,t,b)
for i=1,#f-1 do
local s=ttable(t) and t[i] or todeg(sub(t,i,i))
local d=s>(b or 0) and pal or palt
d(todeg(sub(f,i,i)),s)
end
end

function ttable(p)
return type(p)=='table' and p
end

function inrng(c,l,h)
return mid(c,l,h)==c
end
function amid(c,a)
return mid(c,a,-a)
end

function bmch(b,m,l)
b=band(b,m)
return l and b~=0 or b==m
end
-->8
--generated by pelogen
--@shiftalow/bitchunk

--**color palette for light**--

--**cut & paste to sprite sheet**--
cpalid=1--sprite id as a color palette

rfp={0x2080,0x2481,0x24a5,0xa5a5,0x5bda,0x7bde,0xfbfe,0xffff}
function plgn_load(r)
lpos={normalize({1,-5,-1},1)}
vtxs={}
prspx=4
prspy=4
prspz=4
culr=1
rothlf=32
rotful=64
palx=cpalid%16*8
paly=flr(cpalid/16)*8
--xyz=split('x y z')
rada={{0,1,0},{1,0,0},{0,0,1}}
lpal={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
lpal[0]=0
for c=0,1 do
for y=0,7 do
for x=0,3 do
lpal[y+c*8]+=shl(sget(x+c*4+palx,y+paly),12-x*4)
end
end
end
cls()
objl={}
for i,ids in pairs(r) do
local ts={}
for i,v in pairs(ids) do
local l,t=v%16*8,flr(v/16)*8
for y=0,7 do
y+=t
for x=0,1 do
x=x*4+l
if sget(x,y)~=0 then
add(ts,{
sget(x,y)-8
,sget(x+1,y)-8
,sget(x+2,y)-8
,sget(x+3,y)
,i=#ts+1
})
end
end
end
end
objl[i]=ts
end
return objl
end

--quaternion
function radq(r,v)
local s=sin(r/2)
return {cos(r/2),v[1]*s,v[2]*s,v[3]*s}
end

function qprd(r1,r2,r3,r4,q1,q2,q3,q4)
return
 q1*r1-q2*r2-q3*r3-q4*r4
,q1*r2+q2*r1+q3*r4-q4*r3
,q1*r3+q3*r1+q4*r2-q2*r4
,q1*r4+q4*r1+q2*r3-q3*r2
end

function rolq(r1,r2,r3,r4,q1,q2,q3,q4)
return qprd(r1,-r2,-r3,-r4,qprd(q1,q2,q3,q4,r1,r2,r3,r4))
end
function rtfp(r)
return rfp[mid(1,8,flr(r*100)-8)]
end
function light(c,r)
local s=mid(r*3,0,3)
return band(lshr(c,flr(s)*4),0xff),rfp[mid(1,8,flr(band(s,0x.ffff)*7)+1)]
end
function dot(v1,v2)
	return v1[1]*v2[1]+v1[2]*v2[2]+v1[3]*v2[3]
end
function cross(v1,v2)
return {v1[2]*v2[3]-v1[3]*v2[2],v1[3]*v2[1]-v1[1]*v2[3],v1[1]*v2[2]-v1[2]*v2[1]}
end
function normalize(v,s)
local l=s/sqrt(v[1]*v[1]+v[2]*v[2]+v[3]*v[3])
return v[1]*l,v[2]*l,v[3]*l
end


gvtx={}
//**
//* m:int model_id
//* v:vecter pos
//* r:vectrr rot
//**/
function plgn_render(m,v,r,s)
etq(r)
local zr=8*64+prspx
local vt={}
local tr={}
local vs={}
local wx,wy,wz=v[1],v[2],v[3]
local r={r[1],r[2],r[3]}
local ra=1/rotful
local q={}
for i,v in pairs(r) do
add(q,radq(v*ra,rada[i]))
end
--local vs=gvtx[o.t] or {}
local vs={}

if #vs==0 then
for i,v in pairs(objl[m]) do
local v1,v2,v3,v4=0,v[1],v[2],v[3]
for i,r in pairs(q) do
v1,v2,v3,v4=rolq(r[1],r[2],r[3],r[4],v1,v2,v3,v4)
end
v={
v2*s[1]
,v3*s[2]
,v4*s[3],v[4]
,i=i
,d=v.d
}
vt[v.i]=v
add(vs,v)
end
--local m=2
--m=v[1]>=0 and m or v.i+2
for i,v in pairs(vs) do
v.s=i>2 and v[3]+vs[i-1][3]+vs[i-2][3] or 0
end
quicksort(vs,1,#vs)
for i,v in pairs(vs) do
	if v.i>2 then
	local c=v[4]
	local v1,v2,v3
		if band(v.i,1)==1 then
		v1,v2,v3=vt[v.i-2],vt[v.i-1],v
		else
		v1,v2,v3=v,vt[v.i-1],vt[v.i-2]
		end
	local x1,y1,z1=v1[1],v1[2],v1[3]
	local x2,y2,z2=v2[1],v2[2],v2[3]
	local x3,y3,z3=v3[1],v3[2],v3[3]
	local c,fp=light(
	lpal[c]
	,dot
	(lpos
	,{normalize(cross({normalize({x1-x3,y1-y3,z1-z3},1)},{normalize({x2-x3,y2-y3,z2-z3},1)}),1)}
	))
	
	local cull=((x2-x1)*(y3-y1)-(x3-x1)*(y2-y1)<0 and culr or bnot(culr))>0
	vs[i]={x1,y1,z1,x2,y2,z2,x3,y3,z3,c,fp,cull and not v.d}
	end
end
	gvtx[m]=vs
end--not same obj

for i,v in pairs(vs) do
if v[11] and v[12] then
local z1,z2,z3
=zr/(wz-v[3]+prspx)
,zr/(wz-v[6]+prspy)
,zr/(wz-v[9]+prspz)
pelogen_tri
({v[1]*z1+wx,v[2]*z1+wy}
,{v[4]*z2+wx,v[5]*z2+wy}
,{v[7]*z3+wx,v[8]*z3+wy}
,v[10],v[11])
end
end
return vs
end

--sort
function vtopsort(v1,v2,v3)
if(v1[2]<v2[2]) v1,v2=v2,v1
if(v2[2]<v3[2]) v2,v3=v3,v2
if(v3[2]<v1[2]) v3,v1=v1,v3
return v1[1],v1[2],v1[3]
end

function quicksort(v,s,e)
local i,p
if(s>=e)return
p=s

for i=s+1,e do
if v[i].s<v[s].s then
p+=1
v[p],v[i]=v[i],v[p]
end
end
v[s],v[p]=v[p],v[s]

quicksort(v,s,p-1)
quicksort(v,p+1,e)
end

--trifill
--@shiftalow/bitchunk
function pelogen_tri(v1,v2,v3,col,fp)
color(col)
fillp(fp)
if(v1[2]>v2[2]) v1,v2=v2,v1
if(v1[2]>v3[2]) v1,v3=v3,v1
if(v2[2]>v3[2]) v3,v2=v2,v3
local l,c,r,t,m,b=v1[1],v2[1],v3[1],flr(v1[2]),flr(v2[2]),v3[2]
local i,j,k=(c-l)/(m-t),(r-l)/(b-t),(r-c)/(b-m)
r=l
for t=t,m-1 do
rectfill(l,t,r,t)
r+=j
l+=i
end
for m=m,b-1 do
rectfill(c,m,r,m)
r+=j
c+=k
end
end

-->8
dbg_str={}
isdebug=false
function dbg(str)
add(dbg_str,str)
end

function dbg_print()
dbg_each(dbg_str,0)
dbg_str={}
end

function dbg_each(tbl)
local c=0
tmap(tbl,function(str,i)
	if istable(str) then	dbg_each(str)
	else
 	?str,0,(i-1)*6,15-(c%16)
//		p=p+#(tostr(str)..'')+1
		c+=1
	end
end)
//return p
end

vdmpl={}
function vdmp(v,x)
local tstr=htbl([[
number=#;string=$;boolean=%;function=*;nil=!;
]])
tstr.table='{'
local p,s=true,''
if x==nil then x=0 color(6) cls()
else
s=join(tablefill(' ',x),'')
end
v=ttable(v) and v or {v}
for i,str in pairs(v) do
	if ttable(str) then
	 add(vdmpl,s..i..tstr[type(str)])
		vdmp(str,x+1)
	 add(vdmpl,s..'}')
 p=true
	else
		if p then
		add(vdmpl,s)
		end
 vdmpl[#vdmpl]=vdmpl[#vdmpl]..tstr[type(str)]..':'..tostr(str)..' '
	p=false
	end
end
if x==0 then

--?join(vdmpl,"\n")
tmap(vdmpl,function(v)
?v 
end)
stop()
end
end


-->8
objl=plgn_load({
{16,17},
{32,33,34}
})

vx=64
vy=64
vz=512
rx=0
ry=0
rz=0
scale=0.2
vw={x=vx,y=vy,y=vz}

--vdmp(objl[1])
function plgn_cmb(d,s,p)
tmap(s,function(v,i)
v=cat({},v)
tmap(p,function(s,r)
v[r]+=s
end)
v.i=d[#d].i+1
v.d=i<3
--v.i=v.i>0 and d[#d].i+1 or 0
cat(d,{v})
end)
end
plgn_cmb(objl[1],objl[2],{6,0,0})

function plgn_mv(s,p)
tmap(s,function(v,i)
tmap(p,function(s,r)
v[r]+=s
end)
end)
end
plgn_mv(objl[1],{-2.5,0,0})
--vdmp(objl[1])
function _update60()
cls(1)
mo=getmouse()

ry=sin(time()/2)/vz*512
rx=cos(time()/2)/vz*512
vx=-rx*8+64
vy=ry*8+64

--local rv={x=vx,y=vy,y=vz}
--vw.x,vw.y=mo.x,mo.y
if mo.lt then
vw.y=vz
dragstart(vw)
end
if mo.l then

local dx,dy=dragdist(vw)
vz=dy
end

vs=sin(time()/8)
vss=sin(time()/8*3)
vz=vs+vs/3+vs/5+vss/9+vss/15
?vz
vz=512-vz/1.35*438
--?vz

if btn(0) then
rx-=1
end
if btn(1) then
rx+=1
end
if mo.w<0 then
vz-=4
elseif mo.w>0 then
vz+=4
end

local yn=cos(time())
for i=0,128 do
--tline(i,96,i,127
--,(i)/(8)
--,0
--,0
--,1/8/(sin(time()))
--)

--tline(i,96,i,127
--,(i)/(8)
--,0
--,0
--,1/8/(inrng(yn,0.0,1.0) and sin(time()) or 0)
--)
end
--?sin(time())
--spr(64,0,96,16,16)
local sr=2.8
plgn_render(1,{vx,vy,vz},{rx,ry,rz},{1,1,1})
--plgn_render(2,{96,64,vz},{time()*4,time()*4,time()*4},{1,1,1})
end

-->8
--control
mousestate,mousebtns,moky=unpack(htbl([[
{l=0;r=0;m=0;stx=0;sty=0;x=0;y=0;lh=0;rh=0;mh=0;}
{m r l}
{x y l r m w sx sy lh rh mh}
]]))

poke(0x5f2d,1)
function getmouse()
local mb=stat(34)
local mst=mousestate
local mo=comb(moky,
{stat(32)
,stat(33)
,band(mb,1)>0
,band(mb,2)>0
,band(mb,4)>0
,stat(36)
,mst.stx
,mst.sty
,mst.hl
,mst.hr
,mst.hm
})

function ambtn()
return mo.lt or mo.rt or mo.mt
end

tmap(mousebtns,function(k)
local ut,t,h=k..'ut',k..'t',k..'h'
if mo[k] then 
mst[k]+=1
mo[ut]=false
else
mo[ut]=mst[k]>0
mst[k]=0
end
mo[t]=mst[k]==1

mo[k..'db']=mo[t] and mst[h]>0
mst[h]=max(0,mst[h]-1)
if mo[t] then
mst[h]=mo[k..'db'] and 0 or 12
end

end)

if ambtn() then
mst.stx,mst.sty=mo.x,mo.y
end

mo.sx,mo.sy=mst.stx,mst.sty

mo.mv=(mo.x~=mst.x) or (mo.y~=mst.y)
mst.x,mst.y=mo.x,mo.y

return mo
end
dragst=htbl[[x=0;y=0;z=0;]]
function dragstart(vw,f)
if ambtn() or f then
vw.stx,vw.sty,vw.stz=vw.x,vw.y,vw.z
--local qv=vradq({orot.x,orot.y,orot.z},1/rotful)
--vw.stq,vw.stx,vw.sty,vw.stz=vrolq({0,vw.x,vw.y,vw.z},qv)
end
end

function dragrot(vw,rv)
--local qx,qy,qz=vradq({x=rv.x,y=rv.y,z=rv.z},1/rotful,rx,ry,rz)
local qv=vradq({rv.x,rv.y,rv.z},1/rotful)
local x,y,zx,zy=mo.x-mo.sx,mo.y-mo.sy,mo.x-mo.sx,mo.y-mo.sy
local q,x,y,zx=vrolq({0,x,y,zx},qv)
return
-- x/scsize*rotful+dragst.y
--,y/scsize*rotful+dragst.x
--,zx/scsize*rotful+dragst.z
--,zy/scsize*rotful+dragst.z
 x/scsize*rotful+vw.sty
,y/scsize*rotful+vw.stx
,zx/scsize*rotful+vw.stz
,zy/scsize*rotful+vw.stz
end
--
--function dragdist(vw,rv)
--local qv=vradq({rv.x,rv.y,rv.z},1/scsize)
--local x,y,zx,zy=mo.x-mo.sx,mo.y-mo.sy
--,mo.x-mo.sx
--,mo.y-mo.sy
--return
-- x/scale+vw.stx
--,y/scale+vw.sty
--,zx/scale+vw.stz
--,zy/scale+vw.stz
--end

function dragdist(vw)
local x,y,zx,zy=mo.x-mo.sx,mo.y-mo.sy
,mo.x-mo.sx
,mo.y-mo.sy
return
 x/scale+vw.stx
,y/scale+vw.sty
--,zx/scale+vw.stz
--,zy/scale+vw.stz
end

function rvrsa(a)
return sgn((a=='y' and cos or sin)((orot[a]-16)/scsize))
end

--btnstat={}
function statkeys()
local k={}
local i=0
while stat(30) do
k[stat(31)..'']=true
i+=1
end
return k
end


function updatekey()
--btnstat=statkeys()
local s=tmap(statkeys(),function(v,i)
presskey[i]=v
end)
--tmap(cat(presskey,btnstat),function(v,i)
tmap(presskey,function(v,i)
--local s=statkeys()
--tmap(s,function(v,i)
--presskey[i]=v
keytrg[i]=s[i]
panholdck(s,i)
end)
end
function getkey()
return presskey
end

presskey=''
presskey={}
panhold=0
panhold={}
keystate={}
keytrg={}


function panholdck(s,k)
k=k or ''
panhold[k]=panhold[k] or 0
panhold[k]+=min(1,panhold[k])

if s[k] then
--if s[k] then
 keystate[k]=true
 panhold[k]=panhold[k]>1 and 28 or 1
elseif panhold[k]>31 then
 keystate[k]=false
 panhold[k]=0
end
--dbg(panhold[k])
end

function selcell(prm)
--mx=17
local cr,sr=mkrect'0 0 8 8'
cr.ud(toc(mo.x)*8,toc(mo.y)*8)
if mo.l then
local x,y=toc(mo.sx)*8,toc(mo.sy)*8
local reqn=toc(mx or 32767,16)+1
local w,h
=max(8,toc(mo.x+8)*8-x)
,max(8,toc(mo.y+8)*8-y)
--dbg(toc(reqn*8,h+8)*8)
--dbg(reqn)
--o.prm.r.ud(r.x,r.y
sr=mkrect'0 0 0 0'.ud(x,y
--w h*w
,mid(8,w,toc(reqn*8,h)*8)
,mid(8,h,toc(reqn*8,w)*8))
--,mid(8,w,toc(reqn,toc(h+8))*8)
--,mid(8,h,toc(reqn,toc(w+8))*8))
end

prm.r=sr or prm.r
prm.cr=cr or prm.cr

return cr,sr
end


--function ecselvt(f)
-- local st=max(1,min(vtxsl+vtxsll,vtxsl))
-- local en=min(#vtxs,max(vtxsl+vtxsll,vtxsl))
--	for i=st,en do
--	f(vtxs[i],st,en)
--	end
--end

function getsvt()
local st,en,s
=max(1,min(min(vtxsl,#vtxs)+vtxsll,vtxsl))
,min(#vtxs,max(vtxsl+vtxsll,vtxsl))
,{}
for i=st,en do
add(s,vtxs[i])
end
return s,st,en
end

function backvtxs()
vtxsb={}
tmap(vtxs,function(v)
add(vtxsb,cat({},v))
end)
end
-->8
function lookat(vs,vd)
local forwardvector=normalize(vd-vs)

local dt=dot(vector3.forward, forwardvector)

if (math.abs(dot - (-1.0)) < 0.000001) then
return quaternion(vector3.up.x, vector3.up.y, vector3.up.z, 3.1415926535897932)
end
if (math.abs(dot - (1.0)) < 0.000001) then
return quaternion.identity
end

local rotangle=(float)math.acos(dot)
local rotaxis=vector3.cross(vector3.forward, forwardvector)
rotaxis=normalize(rotaxis)
return createfromaxisangle(rotaxis, rotangle)
end


function qte(q)
local a={}

//roll(x-axisrotation)
local x,y,z,w=unpack(q)
local sinr_cosp=2*(w*x+y*z)
local cosr_cosp=1-2*(x*x+y*y)
a[1]=atan2(sinr_cosp,cosr_cosp)

//pitch(y-axisrotation)
local sinp=2*(w*y-z*x)
if(abs(sinp)>=1) then
a[2]=copysign(m_pi/2,sinp)
else
a[2]=asin(sinp)
end
//yaw(z-axisrotation)
local siny_cosp=2*(w*z+x*y)
local cosy_cosp=1-2*(y*y+z*z)
a[3]=atan2(siny_cosp,cosy_cosp)

return a
end
--yaw (z), pitch (y), roll (x)
function etq(r)
// abbreviations for the various angular functions
local z,y,x=unpack(r)
z*=0.5
y*=0.5
x*=0.5
local cy=cos(z)
local sy=sin(z)
local cp=cos(y)
local sp=sin(y)
local cr=cos(x)
local sr=sin(x)
return {sr*cp*cy-cr*sp*sy
,cr*sp*cy+sr*cp*sy
,cr*cp*sy-sr*sp*cy
,cr*cp*cy+sr*sp*sy}
end

function asin(y)
 return atan2(sqrt(1-y*y),-y)
end

function copysign(x,y)
return abs(x)*sgn(y)
end
__gfx__
000000000000288e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000112499a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700122d9aa70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000133b3bb70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000244fdcc70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070015565dd60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000056678eef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000006777eff70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7d947d74539995990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9d949d74939993790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
95797d79539953790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
75797d99537955790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
75999d99557975740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
95999579559475940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
93795579000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
53795599000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
53945d9475727b72b399b37900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7b99bd995d799b795399537900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9b99b399bd7995790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
95995399b37975790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
75997b9953795d790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7b729b9253995d990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9b7295925d995d790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
95727592bd94bd740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000011100000111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000001bb310001bb3331000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055555550001b3333111b333333100000000000000000000000000000000000000000000000000000000000000000000000000005555555000000000
00000000544444445550133331113333111000000000555000000000000555555550000000000055550000055500000055550000000005554444444500000000
00000005466666644445013313b13311555550000005444500000000555444444445550000000544445000544455000544445550000054444444666450000000
00000005466664444444501113331155444445500054666450000005444466666664445500005466664505466644505466664445500544444994466450000000
00000054666444499444505551310544666664450054446645000054444444466666664450054666664505466666455466666664455544449999446645000000
00000054664444994455554445131544444666450544946664500544499444444466666645546666666450544466455444444666644555444499946645000000
00000054664449944505446664513154494466450544944664500544999944449444446645546644466450544446455449944444666450544449944645000000
00000546644499445054666444501315499446645549994466450544999994444499944455446444446450544944445549999444444445054444994664500000
00000546444999450546644994451315449944645549994466450544499994444444994455444444444445544444445549944444944444505444494464500000
00000546444994455464499999451310549994645549999446445054449999444554444554444444494445544944445549444554449444455444494464500000
00005444449994554449999999451311544994645549999944445005544499944455445054494444449445054944445549444505544994450544499466450000
00005444449944544499944444451333154994445549994494444500055444994445550544444444549944554494445544444500054494445544449446450000
00005444499945544994445555501333154499444549944449444500550544449444500544944445549944554494445544944455505449445054449946450000
00054444499445449444550000001133105499444544945449444455445555444444455444944445544944554494445054944454455449444554444944645000
00054444999455444455000002222211105499944544945449944455444450554444455449444450544944554494444554944454450549444505444944645000
0005444499945544550000022eeeee22105499944544445449944455444445005494455449444450544944554494444554944454445549444505444494445000
00054449994455555000002e8888888e205449944544445449994445544944505494554499444450054944554494444554944445444444444505444494445000
0054444999455445500002e887eee888e20549944544445444994445544944554444554499444450054944554499444554494445449944445000544494444500
0054449994454664450002887ee22288820549944444445444994445054494444945054499444500054944554499444554494445544444550000544449444500
005444999445464444502e8ee888822e8e2549944444445544999444554499444445544994444555054944554499444554494444555555550000544449444500
0054499994554649944587ee82222e8ee78549944449445544999444505499944445544994444944554444554499444505499444450544445500054449444500
0544499944554499994587ee2222228ee78549994444455544999444455449944455449994444944444944554499444455449444445544464450054444444450
0544499945054499994587ee2222228ee78549999494450544999944455449444505449944445594444444554499444455449944444544946645054444444450
054499994505449999452e882e2228288e2549999994450544999944455499444554499944445054494444554499444455449944444554444464554449444450
054499944505444999450288828882e8820549999944450544499444505494445544994444445054449444554499444445544994444554499444554449444450
0544999450005449944502e888eee788e20544999944500544444445554444455449444444450005449445054449944445544994445054499944505444444450
05449944500054444450002e8888888e200054499444500054444555444445505444444444450005444445005444444445544444445005449944505444444500
0054494500000544450000022eeeee22000005444455000005555005444550000544444445500000544450000544444550055444450005444445005444444500
00554445000000555000000002222200000000555500000000000000555000000055555550000000055500000055555000000555500000555550000544455000
00005550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055500000
__map__
404142434445464748494a4b4c4d4e4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
505152535455565758595a5b5c5d5e5f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
606162636465666768696a6b6c6d6e6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
707172737475767778797a7b7c7d7e7f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
